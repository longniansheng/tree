{"version":3,"sources":["E:/workspace/sinoui-tree/docs/treeData.ts","E:/workspace/sinoui-tree/packages/tree-models/src/TreeModelEventType.ts","E:/workspace/sinoui-tree/packages/tree-models/src/TreeModel.ts","E:/workspace/sinoui-tree/packages/tree-models/src/index.ts","E:/workspace/sinoui-tree/packages/tree/src/SingleTreeSelectStrategy.ts","E:/workspace/sinoui-tree/packages/tree/src/MultipleTreeSelectStrategy.ts","E:/workspace/sinoui-tree/packages/tree/src/TreeNode/ExpandIconButton.tsx","E:/workspace/sinoui-tree/packages/tree/src/TreeNode/TreeNodeLayout.tsx","E:/workspace/sinoui-tree/packages/tree/src/TreeNode/TreeNode.tsx","E:/workspace/sinoui-tree/packages/tree/src/TreeNode/index.ts","E:/workspace/sinoui-tree/packages/tree/src/CascadeTreeSelectStrategy.ts","E:/workspace/sinoui-tree/packages/tree/src/calcNodesIndent.ts","E:/workspace/sinoui-tree/packages/tree/src/Tree.tsx","E:/workspace/sinoui-tree/packages/tree/src/index.ts","E:/workspace/sinoui-tree/docs/components/TreeNode.tsx","E:/workspace/sinoui-tree/docs/components/DraggableTreeNode.tsx","E:/workspace/sinoui-tree/docs/components/DraggableTreeDemo.tsx","E:/workspace/sinoui-tree/docs/index.mdx"],"names":["getTreeNodes","level","deep","parentId","leaf","children","i","child","id","title","selectType","selected","push","treeData","TreeModelEventType","VIRTUAL_ROOT_NODE","TreeModel","treeNodes","loadChildren","eventEmitter","EventEmitter","virtualRootNode","nodeConfig","nodes","on","removeAllListeners","removeListener","this","length","loadNodeChildren","addNode","bind","rootNodes","forEach","node","removeNode","visibleNodes","expanded","nodeId","upToRoot","getNodeById","parent","emit","EXPAND_NODE","filter","COLLAPSE_NODE","find","indexOf","parentNodeId","nodeConfigs","addNodeAt","pos","idx","getInsertNodePos","Error","transformTreeNodesToArray","loaded","splice","getChildren","ADD_NODE","extraNodeInfo","Object","assign","UPDATE_NODE","siblingNode","getNodeAt","getNodeIdx","start","deleteCount","getDescendantCount","REMOVE_NODE","isInheritanceRelationship","prevParent","nextParent","prevIdx","nextIdx","count","movingNodes","levelDelta","movingNode","MOVE_NODE","item","traverseNodeChildren","treeNode","callback","traverseNodeChildrenByDeep","loading","needLoadChildren","BEGIN_LOAD_NODE_CHILDREN","result","undefined","applyResult","LOAD_NODE_CHILDREN_SUCCESS","Array","then","error","LOAD_NODE_CHILDREN_FAILURE","parentNode","restConfig","transform","transformNode","map","SingleTreeSelectStrategy","selectedItems","isAllowEmpty","disabled","selectable","MultipleTreeSelectStrategy","treeModel","radioSelectedItem","Boolean","slice","toggleItemFromItems","ExpandIcon","styled","Icon","attrs","color","props","theme","transitions","create","duration","ExpandIconButton","onClick","event","preventDefault","stopPropagation","collapseNode","expandNode","React","Component","withRipple","center","rippleLayoutClassName","rippleClassName","fixSize","TreeNodeLayout","div","nodeHeight","dense","palette","primary","text","shortest","easing","easeInOut","indent","disableSelectedNodeStyle","opacify","isDragging","TreeNode","className","onDblClick","innerRef","renderNodeTitle","renderTreeNodeRightSection","ref","classNames","multiple","selectedWhenNodeClick","treeSelectStrategy","toggle","onDoubleClick","e","key","renderExpandIcon","Progress","size","thickness","renderProgress","hideSelectedButtonIcon","SelectButton","RadioButton","CheckboxButton","checked","indeterminate","partialSelected","onChange","renderCheckbox","nodeIcon","useExpandIconToNodeIcon","hiddenNodeIcon","nodeIconProp","icon","iconColor","renderNodeIcon","COLOR","TREE_MODE_NODE_CHANGE_EVENTS","CascadeTreeSelectStrategy","selectedItemsfromStrategy","colors","virtualNodes","initColors","calcVirtualNodes","rootNode","virtual","startsWith","WHITE","colorNode","RED","getNodeColorWithChildren","skipDisabled","selectableChildren","isRed","isWhite","childId","GREY","syncSelectedItems","calcNodesIndent","allNodes","indents","relativeIndents","inner","nodeIcons","containsExpandedIcon","containsNodeIcon","containsCheckboxIcon","nodeExpanded","isRenderNodeIcon","nodeCheckbox","isRenderCheckboxIcon","checkbox","relativeIndent","Wrapper","TREE_MODE_CHANGE_EVENTS","Tree","isControlled","updateNode","isVisible","onTreeModelUpate","createTreeModel","onSelect","state","getVisibleNodes","prevProps","createTreeSelectStrategy","treeRef","updateAfterPropsChange","updateRootNodes","setState","selectedItemsProps","selectedItemsState","changed","isSelected","isPartialSelected","expandRootNodes","strategy","obj","cascade","updateSelectedItems","fnName","fn","args","apply","style","textDecoration","nodeStyle","onNodeClick","onNodeDblClick","renderNode","treeNodeProps","renderTreeNode","nextProps","prevState","selectItems","defaultProps","treeNodeDrop","drop","hover","monitor","component","dragNodeId","getItem","dragIndex","findIndex","hoverNodeId","hoverIndex","hoverParentNodeId","hoverBoundingRect","findDOMNode","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","getNodeIdxOfParent","moveNode","canDrop","TreeNodeComponent","connectDropTarget","connectDragSource","instance","domNode","DropTarget","connect","dropTarget","isOver","DragSource","beginDrag","dragSource","DraggableTreeNode","height","Promise","resolve","setTimeout","DraggableTreeDemo","layoutProps","MDXLayout","MDXContent","components","mdxType","parentName","__position","__code","__scope","Playground","reject","isMDXComponent"],"mappings":"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","file":"static/js/docs-index.3c9cb451.js","sourcesContent":["/**\n * 获取树节点\n *\n * @param {number} level 层级\n * @param {number} deep 深度\n * @param {string} parentId 父元素的id\n * @returns\n */\nexport function getTreeNodes(\n  level: number,\n  deep: number,\n  parentId: string,\n  leaf: boolean = deep === 0,\n) {\n  const children: any = [];\n  for (let i = 0; i < (level === 1 ? 1 : 10); i += 1) {\n    const child = {\n      id: `${parentId}_${i}`,\n      title: `${parentId}_${i}`,\n      leaf,\n      children: [],\n      selectType: 'checkbox',\n      selected: i % 3 === 0,\n    };\n    children.push(child);\n    if (deep !== 0) {\n      child.children = getTreeNodes(level + 1, deep - 1, child.id);\n    }\n  }\n  return children;\n}\n\nconst treeData = getTreeNodes(0, 3, 'node');\n\nexport default treeData;\n","enum TreeModelEventType {\n  /**\n   * 新增节点\n   */\n  ADD_NODE = 'ADD_NODE',\n  /**\n   * 更新节点\n   */\n  UPDATE_NODE = 'UPDATE_NODE',\n  /**\n   * 删除节点\n   */\n  REMOVE_NODE = 'REMOVE_NODE',\n  /**\n   * 移动节点\n   */\n  MOVE_NODE = 'MOVE_NODE',\n  /**\n   * 展开节点\n   */\n  EXPAND_NODE = 'EXPAND_NODE',\n  /**\n   * 收缩节点\n   */\n  COLLAPSE_NODE = 'COLLAPSE_NODE',\n  /**\n   * 开始加载子节点\n   */\n  BEGIN_LOAD_NODE_CHILDREN = 'BEGIN_LOAD_NODE_CHILDREN',\n  /**\n   * 加载子节点成功\n   */\n  LOAD_NODE_CHILDREN_SUCCESS = 'LOAD_NODE_CHILDREN_SUCCESS',\n  /**\n   * 加载子节点失败\n   */\n  LOAD_NODE_CHILDREN_FAILURE = 'LOAD_NODE_CHILDREN_FAILURE',\n}\n\nexport default TreeModelEventType;\n","import { EventEmitter } from 'events';\nimport TreeNodeType from './TreeNodeType';\nimport TreeNodeConfigType from './TreeNodeConfigType';\nimport TreeModelEventType from './TreeModelEventType';\n\nexport type LoadChildrenEventListener = (\n  node: TreeNodeType | null | undefined,\n  nodes: TreeNodeType[],\n) => void;\n\nconst VIRTUAL_ROOT_NODE = 'VIRTUAL_ROOT_NODE';\n\n/**\n * 树模型\n *\n * 负责树结构数据的：\n *\n * * 节点数据的增删改查\n * * 节点数据之间的从属关系\n * * 节点可见性控制\n */\nexport default class TreeModel {\n  private eventEmitter: EventEmitter = new EventEmitter();\n\n  private virtualRootNode: TreeNodeType = {\n    id: VIRTUAL_ROOT_NODE,\n    title: '虚拟根节点',\n    level: -1,\n    nodeConfig: {\n      id: VIRTUAL_ROOT_NODE,\n      title: '虚拟根节点',\n    },\n  };\n\n  public nodes: TreeNodeType[] = [];\n\n  /**\n   * 添加监听\n   */\n  public on: (\n    eventName: TreeModelEventType,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void,\n  ) => void;\n\n  /**\n   * 删除所有监听\n   */\n  public removeAllListeners: (event?: TreeModelEventType) => void;\n\n  /**\n   * 删除监听\n   */\n  public removeListener: (\n    event: TreeModelEventType,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void,\n  ) => void;\n\n  /**\n   * 创建树模型\n   * @param treeNodes\n   */\n  constructor(\n    treeNodes: TreeNodeConfigType[] = [],\n    public readonly loadChildren?: (\n      treeNode?: TreeNodeType,\n    ) => Promise<TreeNodeConfigType[]> | TreeNodeConfigType[],\n  ) {\n    this.nodes = [];\n    if (treeNodes.length === 0 && loadChildren) {\n      this.virtualRootNode.children = [];\n      this.loadNodeChildren(this.virtualRootNode);\n    } else {\n      this.addNode(VIRTUAL_ROOT_NODE, ...treeNodes);\n    }\n\n    this.on = this.eventEmitter.on.bind(this.eventEmitter);\n    this.removeAllListeners = this.eventEmitter.removeAllListeners.bind(\n      this.eventEmitter,\n    );\n    this.removeListener = this.eventEmitter.removeListener.bind(\n      this.eventEmitter,\n    );\n  }\n\n  /**\n   * 更新根节点\n   */\n  public updateRootNodes(treeNodes: TreeNodeConfigType[]) {\n    (this.rootNodes || []).forEach((node) => this.removeNode(node.id));\n    this.addNode(VIRTUAL_ROOT_NODE, ...treeNodes);\n  }\n\n  /**\n   * 获取根节点\n   */\n  public get rootNodes() {\n    return this.virtualRootNode.children;\n  }\n\n  /**\n   * 获取可见的节点\n   */\n  public getVisibleNodes(): TreeNodeType[] {\n    const visibleNodes: TreeNodeType[] = [];\n\n    const push = (node: TreeNodeType) => {\n      visibleNodes.push(node);\n      if (node.expanded && node.children) {\n        node.children.forEach(push);\n      }\n    };\n\n    (this.rootNodes || []).forEach(push);\n\n    return visibleNodes;\n  }\n\n  /**\n   * 展开节点\n   *\n   * @param nodeId 节点id\n   * @param upToRoot 向上遍历展开所有的祖先节点\n   */\n  public expandNode(nodeId: string, upToRoot = false) {\n    const node = this.getNodeById(nodeId);\n    node.expanded = true;\n    if (upToRoot && node.parent) {\n      let { parent } = node;\n      while (parent) {\n        parent.expanded = true;\n        parent = parent.parent as TreeNodeType;\n      }\n    }\n\n    this.eventEmitter.emit(TreeModelEventType.EXPAND_NODE, nodeId);\n\n    return this.loadNodeChildren(node);\n  }\n\n  /**\n   * 展开所有节点\n   */\n  public expandAll() {\n    this.nodes\n      .filter((node) => !node.leaf)\n      .forEach((node) => {\n        // eslint-disable-next-line no-param-reassign\n        node.expanded = true;\n      });\n\n    this.eventEmitter.emit(TreeModelEventType.EXPAND_NODE, -1);\n  }\n\n  /**\n   * 收缩节点\n   * @param nodeId 节点id\n   */\n  public collapseNode(nodeId: string) {\n    const node = this.getNodeById(nodeId);\n    node.expanded = false;\n\n    this.eventEmitter.emit(TreeModelEventType.COLLAPSE_NODE, nodeId);\n  }\n\n  /**\n   * 获取id为nodeId的节点\n   *\n   * @param nodeId 节点id\n   */\n  public getNodeById(nodeId: string): TreeNodeType {\n    return nodeId === VIRTUAL_ROOT_NODE\n      ? this.virtualRootNode\n      : (this.nodes.find((node) => node.id === nodeId) as TreeNodeType);\n  }\n\n  /**\n   * 获取节点在其父元素中的位置\n   */\n  public getNodeIdxOfParent(nodeId: string): number {\n    const node = this.getNodeById(nodeId);\n    const { parent } = node;\n    if (parent) {\n      return (parent.children || []).indexOf(node);\n    }\n    return (this.rootNodes || []).indexOf(node);\n  }\n\n  /**\n   * 新增节点\n   *\n   * @param parentNodeId 父节点id\n   * @param nodeConfigs 新增的节点\n   */\n  public addNode(\n    parentNodeId: string | null | undefined,\n    ...nodeConfigs: TreeNodeConfigType[]\n  ) {\n    this.addNodeAt(parentNodeId, -1, ...nodeConfigs);\n  }\n\n  /**\n   * 在指定位置上添加节点。\n   *\n   * 说明一下指定位置的用法：\n   *\n   * * 如果指定了大于0的位置数字，则表示在位置数字所指示的位置上插入新节点，此位置上的原树节点则往后移动一位；\n   * * 如果指定了-1，表示插入在最后的位置上。\n   *\n   * @param parentNodeId 父节点id\n   * @param pos 新增节点在父节点的位置，-1表示插入在父节点的孩子节点最后位置上\n   * @param nodeConfigs 新增的节点\n   */\n  public addNodeAt(\n    parentNodeId: string | null | undefined,\n    pos: number,\n    ...nodeConfigs: TreeNodeConfigType[]\n  ) {\n    const parent = parentNodeId\n      ? this.getNodeById(parentNodeId)\n      : this.virtualRootNode;\n    const idx = this.getInsertNodePos(parent, pos);\n    if (idx === -1) {\n      throw new Error('指定的插入位置不正确');\n    }\n\n    const nodes = this.transformTreeNodesToArray(parent, nodeConfigs);\n\n    nodes.forEach((node) => {\n      if (!node.loaded && node.expanded) {\n        this.loadNodeChildren(node);\n      }\n    });\n\n    this.nodes.splice(idx, 0, ...nodes);\n    parent.children = this.getChildren(parent);\n\n    this.eventEmitter.emit(\n      TreeModelEventType.ADD_NODE,\n      parentNodeId,\n      pos,\n      ...nodeConfigs,\n    );\n  }\n\n  /**\n   * 更新节点信息\n   *\n   * @param nodeId 节点id\n   * @param extraNodeInfo 额外的节点信息\n   */\n  public updateNode(\n    nodeId: string,\n    extraNodeInfo: {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [x: string]: any;\n    },\n  ) {\n    const node = this.getNodeById(nodeId);\n    Object.assign(node, extraNodeInfo);\n\n    this.eventEmitter.emit(\n      TreeModelEventType.UPDATE_NODE,\n      nodeId,\n      extraNodeInfo,\n    );\n\n    return node;\n  }\n\n  /**\n   * 获取插入节点的位置\n   *\n   * @param parent 父节点\n   * @param pos 节点位置\n   */\n  public getInsertNodePos(parent: TreeNodeType, pos: number) {\n    const siblingNode = this.getNodeAt(parent, pos);\n    if (!siblingNode && pos === -1) {\n      return this.getNodeIdx(parent) + 1;\n    }\n    if (!siblingNode) {\n      return -1;\n    }\n    if (siblingNode && pos === -1) {\n      return this.getNodeIdx(siblingNode) + 1;\n    }\n    return this.getNodeIdx(siblingNode);\n  }\n\n  /**\n   * 获取相对于父元素位置的节点\n   *\n   * @param parent 父节点\n   * @param pos 相对于父节点的位置\n   */\n  // eslint-disable-next-line class-methods-use-this\n  public getNodeAt(parent: TreeNodeType, pos: number) {\n    const children = parent.children || [];\n    if (pos === -1) {\n      return children[children.length - 1];\n    }\n    return children[pos];\n  }\n\n  /**\n   * 获取节点在整棵树中的位置\n   *\n   * @param node 节点\n   */\n  public getNodeIdx(node: TreeNodeType) {\n    return this.nodes.indexOf(node);\n  }\n\n  /**\n   * 删除节点\n   *\n   * @param nodeId 节点id\n   */\n  public removeNode(nodeId: string) {\n    const node = this.getNodeById(nodeId);\n    const parent = node.parent || this.virtualRootNode;\n    const start = this.getNodeIdx(node);\n    const deleteCount = this.getDescendantCount(node) + 1;\n\n    this.nodes.splice(start, deleteCount);\n\n    parent.children = this.getChildren(parent);\n\n    this.eventEmitter.emit(TreeModelEventType.REMOVE_NODE, nodeId);\n  }\n\n  /**\n   * 移动节点\n   *\n   * @param nodeId 节点id\n   * @param [parentId] 父节点id\n   * @param pos 新位置\n   */\n  public moveNode(nodeId: string, parentId: string, pos = -1) {\n    if (this.isInheritanceRelationship(nodeId, parentId)) {\n      // 不允许将节点移动至其孩子节点上\n      return false;\n    }\n\n    const node = this.getNodeById(nodeId);\n    const prevParent = node.parent || this.virtualRootNode;\n    const nextParent = parentId\n      ? this.getNodeById(parentId)\n      : this.virtualRootNode;\n    const prevIdx = this.getNodeIdx(node);\n    const nextIdx = this.getInsertNodePos(nextParent, pos);\n\n    const count = this.getDescendantCount(node) + 1;\n    const movingNodes = this.nodes.splice(prevIdx, count);\n    this.nodes.splice(nextIdx, 0, ...movingNodes);\n\n    if (prevParent !== nextParent) {\n      const levelDelta = nextParent.level - prevParent.level;\n      if (levelDelta !== 0) {\n        movingNodes.forEach((movingNode) => {\n          // eslint-disable-next-line no-param-reassign\n          movingNode.level += levelDelta;\n        });\n      }\n\n      node.parent = nextParent;\n      nextParent.leaf = false;\n\n      prevParent.children = this.getChildren(prevParent);\n    }\n\n    nextParent.children = this.getChildren(nextParent);\n\n    this.eventEmitter.emit(TreeModelEventType.MOVE_NODE, nodeId, parentId, pos);\n\n    return true;\n  }\n\n  /**\n   * 判断两个节点是否在同一个层级路径中\n   *\n   * @param parentId 父节点\n   * @param nodeId 子节点\n   */\n  public isInheritanceRelationship(parentId: string, nodeId: string) {\n    const parent = this.getNodeById(parentId);\n    let node = this.getNodeById(nodeId);\n\n    while (node) {\n      if (node === parent) {\n        return true;\n      }\n      node = node.parent as TreeNodeType;\n    }\n\n    return false;\n  }\n\n  /**\n   * 获取节点的子节点\n   *\n   * @param node 节点\n   */\n  public getChildren(node: TreeNodeType) {\n    return this.nodes.filter((item) => item.parent === node);\n  }\n\n  /**\n   * 获取节点的后代节点数量\n   *\n   * @param node 节点\n   */\n  public getDescendantCount(node: TreeNodeType) {\n    let count = 0;\n    this.traverseNodeChildren(node, (treeNodes) => {\n      count += treeNodes.length;\n    });\n    return count;\n  }\n\n  /**\n   * 遍历孩子节点\n   * @param treeNode 树节点\n   * @param callback 回调函数\n   */\n  private traverseNodeChildren(\n    treeNode: TreeNodeType,\n    callback: (treeNodes: TreeNodeType[]) => void,\n  ) {\n    if (treeNode.children) {\n      callback(treeNode.children);\n      // eslint-disable-next-line no-restricted-syntax\n      for (const child of treeNode.children) {\n        this.traverseNodeChildren(child, callback);\n      }\n    }\n  }\n\n  /**\n   * 深度优先遍历孩子节点\n   *\n   * @param {TreeNodeType} treeNode\n   * @param {(treeNodes: TreeNodeType[]) => void} callback\n   * @memberof TreeModel\n   */\n  public traverseNodeChildrenByDeep(\n    treeNode: TreeNodeType,\n    callback: (treeNodes: TreeNodeType) => void,\n  ) {\n    if (treeNode.children) {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const child of treeNode.children) {\n        this.traverseNodeChildrenByDeep(child, callback);\n      }\n    }\n    callback(treeNode);\n  }\n\n  /**\n   * 是否需要加载子节点\n   *\n   * @param node 树节点\n   */\n  public needLoadChildren(node: TreeNodeType) {\n    return (\n      !node.leaf &&\n      (!node.children || node.children.length === 0) &&\n      (!node.loading && !node.loaded) &&\n      !!this.loadChildren\n    );\n  }\n\n  /**\n   * 加载节点的子节点数据\n   *\n   * @param node 节点\n   */\n  public loadNodeChildren(node: TreeNodeType) {\n    if (!this.needLoadChildren(node)) {\n      return undefined;\n    }\n    // eslint-disable-next-line no-param-reassign\n    node.loading = true;\n    this.eventEmitter.emit(\n      TreeModelEventType.BEGIN_LOAD_NODE_CHILDREN,\n      node.id,\n    );\n    const result = this.loadChildren\n      ? this.loadChildren(node === this.virtualRootNode ? undefined : node)\n      : [];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const applyResult = (treeNodes: any) => {\n      this.addNode(node.id, ...treeNodes);\n      // eslint-disable-next-line no-param-reassign\n      node.loaded = true;\n      // eslint-disable-next-line no-param-reassign\n      node.loading = false;\n      this.eventEmitter.emit(\n        TreeModelEventType.LOAD_NODE_CHILDREN_SUCCESS,\n        node.id,\n      );\n    };\n\n    if (result instanceof Array) {\n      applyResult(result);\n    } else {\n      result.then(applyResult).catch((error) => {\n        this.eventEmitter.emit(\n          TreeModelEventType.LOAD_NODE_CHILDREN_FAILURE,\n          node.id,\n          error,\n        );\n      });\n    }\n\n    return applyResult;\n  }\n\n  /**\n   * 转换树节点数据\n   *\n   * @param treeNode 待转换的树节点数据\n   * @param parentNode 父节点\n   */\n  // eslint-disable-next-line class-methods-use-this\n  private transformNode(\n    treeNode: TreeNodeConfigType,\n    parentNode?: TreeNodeType,\n  ) {\n    const { children, ...restConfig } = treeNode;\n    const node: TreeNodeType = {\n      ...restConfig,\n      nodeConfig: restConfig,\n      parent: parentNode,\n      level: parentNode ? parentNode.level + 1 : 0,\n      leaf:\n        typeof treeNode.leaf === 'boolean'\n          ? treeNode.leaf\n          : !treeNode.children || treeNode.children.length === 0,\n    };\n    return node;\n  }\n\n  /**\n   * 将树形结构数据转化成一维数组\n   *\n   * @param parent 父节点\n   * @param treeNodes 需要转化的节点配置\n   */\n  private transformTreeNodesToArray(\n    parent: TreeNodeType,\n    treeNodes: TreeNodeConfigType[],\n  ): TreeNodeType[] {\n    const nodes: TreeNodeType[] = [];\n\n    const transform = (\n      treeNode: TreeNodeConfigType,\n      parentNode?: TreeNodeType,\n    ) => {\n      const node = this.transformNode(treeNode, parentNode);\n      nodes.push(node);\n\n      if (treeNode.children) {\n        node.children = treeNode.children.map((child) =>\n          transform(child, node),\n        );\n      }\n      return node;\n    };\n\n    // eslint-disable-next-line no-restricted-syntax\n    for (const treeNode of treeNodes) {\n      transform(treeNode, parent);\n    }\n\n    return nodes;\n  }\n}\n","import TreeModel from './TreeModel';\nimport TreeModelEventType from './TreeModelEventType';\nimport TreeNodeConfigType from './TreeNodeConfigType';\nimport TreeNodeType from './TreeNodeType';\nimport TreeSelectStrategy from './TreeSelectStrategy';\n\nexport {\n  TreeModelEventType,\n  TreeNodeConfigType,\n  TreeNodeType,\n  TreeSelectStrategy,\n  TreeNodeType as TreeNode,\n};\n\nexport default TreeModel;\n","import { TreeSelectStrategy, TreeNodeType } from '@sinoui/tree-models';\n\nexport default class SingleTreeSelectStrategy implements TreeSelectStrategy {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(\n    public selectedItems: string[] = [],\n    public isAllowEmpty: boolean = false,\n  ) {}\n\n  public toggle(treeNode: TreeNodeType) {\n    if (!treeNode || treeNode.disabled || treeNode.selectable === false) {\n      return;\n    }\n    if (this.selectedItems[0] === treeNode.id) {\n      if (this.isAllowEmpty) {\n        this.selectedItems = [];\n      }\n      return;\n    }\n    this.selectedItems = [treeNode.id];\n  }\n\n  public isSelected(treeNode: TreeNodeType) {\n    return this.selectedItems && this.selectedItems.indexOf(treeNode.id) !== -1;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public isPartialSelected() {\n    return false;\n  }\n}\n","import TreeModel, { TreeNodeType } from '@sinoui/tree-models';\n\nexport default class MultipleTreeSelectStrategy {\n  constructor(public selectedItems: string[] = [], treeModel: TreeModel) {\n    const radioSelectedItem = selectedItems\n      .map((nodeId) => treeModel.getNodeById(nodeId))\n      .filter(Boolean)\n      .find((node) => node.selectType === 'radio');\n    if (radioSelectedItem) {\n      this.radioSelectedItem = radioSelectedItem.id;\n    }\n  }\n\n  public radioSelectedItem = '';\n\n  private toggleItemFromItems(nodeId: string) {\n    const idx = this.selectedItems.indexOf(nodeId);\n    if (idx === -1) {\n      this.selectedItems = [...this.selectedItems, nodeId];\n    } else {\n      this.selectedItems = [\n        ...this.selectedItems.slice(0, idx),\n        ...this.selectedItems.slice(idx + 1),\n      ];\n    }\n  }\n\n  public toggle(node: TreeNodeType) {\n    if (!node || node.selectable === false || node.disabled) {\n      return;\n    }\n\n    if (node.selectType === 'radio') {\n      if (this.radioSelectedItem) {\n        this.toggleItemFromItems(this.radioSelectedItem);\n      }\n      this.radioSelectedItem = node.id;\n      this.toggleItemFromItems(this.radioSelectedItem);\n    } else {\n      this.toggleItemFromItems(node.id);\n    }\n  }\n\n  public isSelected(treeNode: TreeNodeType) {\n    return this.selectedItems && this.selectedItems.indexOf(treeNode.id) !== -1;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public isPartialSelected() {\n    return false;\n  }\n}\n","import React from 'react';\nimport { withRipple } from '@sinoui/ripple';\nimport Icon from 'sinoui-components/Icon';\nimport TreeModel, { TreeNode } from '@sinoui/tree-models';\nimport { MdArrowDropDown } from 'react-icons/md';\nimport styled from 'styled-components';\n\nexport interface Props {\n  node: TreeNode;\n  treeModel: TreeModel;\n  disabled?: boolean;\n}\n\nexport interface ExpandIconProps {\n  expanded?: boolean;\n}\n\nconst ExpandIcon = styled(Icon).attrs(({ color }) => ({\n  color: color || 'primary',\n}))<ExpandIconProps>`\n  cursor: pointer;\n  user-select: none;\n  transform: rotate(${(props) => (props.expanded ? '-45' : '-90')}deg);\n  transition: ${(props) =>\n    props.theme.transitions.create('transform', {\n      duration: props.theme.transitions.duration.short,\n    })};\n`;\n\nclass ExpandIconButton extends React.Component<Props> {\n  private onClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    const { node, treeModel } = this.props;\n    if (node.expanded) {\n      treeModel.collapseNode(node.id);\n    } else {\n      treeModel.expandNode(node.id);\n    }\n  };\n\n  public render() {\n    const { node } = this.props;\n    return (\n      <ExpandIcon onClick={this.onClick} expanded={node.expanded}>\n        <MdArrowDropDown />\n      </ExpandIcon>\n    );\n  }\n}\n\nexport default withRipple({\n  center: true,\n  rippleLayoutClassName: 'sinoui-tree__expand-icon-button__ripple-layout',\n  rippleClassName: 'sinoui-tree__expand-icon-button__ripple',\n  fixSize: true,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n})(ExpandIconButton) as any;\n","import styled from 'styled-components';\nimport { opacify } from 'polished';\nimport { TreeNodeType } from '@sinoui/tree-models';\n\nexport interface Props {\n  useExpandIconToNodeIcon?: boolean;\n  node: TreeNodeType;\n  className?: string;\n  style?: React.CSSProperties;\n  selected?: boolean;\n  dense?: boolean;\n  nodeHeight?: number;\n  /**\n   * 拖拽中\n   *\n   * @type {boolean}\n   * @memberof Props\n   */\n  isDragging?: boolean;\n  multiple?: boolean;\n  disableSelectedNodeStyle?: boolean;\n  indent: number;\n}\n\nconst TreeNodeLayout = styled.div<Props>`\n  display: flex;\n  flex-direction: row;\n  min-height: ${(props) => props.nodeHeight || (props.dense ? 32 : 40)}px;\n  align-items: center;\n\n  color: ${(props) =>\n    props.node.selected\n      ? props.theme.palette.primary[500]\n      : props.theme.palette.text.primary};\n\n  & > .sinoui-tree-node__icon {\n    width: 24px;\n    height: 24px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    > .sinoui-icon,\n    > .sinoui-svg-icon {\n      font-size: 20px;\n    }\n  }\n\n  & > .sinoui-tree-node__title {\n    flex: 1;\n    transition: ${(props) =>\n      props.theme.transitions.create('color', {\n        duration: props.theme.transitions.duration.shortest,\n        easing: props.theme.transitions.easing.easeInOut,\n      })};\n    color: currentColor;\n    cursor: default;\n  }\n\n  padding-left: ${(props) => props.indent * 24}px;\n\n  background-color: ${(props) =>\n    props.node.selected &&\n    !props.disableSelectedNodeStyle &&\n    opacify(-0.4, props.theme.palette.primary[100])};\n\n  &:hover {\n    color: ${(props) => props.theme.palette.primary[500]};\n    background-color: ${(props) =>\n      opacify(\n        props.node.selected && !props.disableSelectedNodeStyle ? -0.4 : -0.8,\n        props.theme.palette.primary[100],\n      )};\n  }\n\n  opacity: ${(props) => (props.isDragging ? 0.1 : 1)};\n`;\n\nexport default TreeNodeLayout;\n","import React from 'react';\nimport Progress from 'sinoui-components/Progress';\nimport Icon, { SimpleIcon } from 'sinoui-components/Icon';\nimport { P } from 'sinoui-components/Text';\nimport { CheckboxButton } from 'sinoui-components/Checkbox';\nimport { RadioButton } from 'sinoui-components/Radio';\nimport classNames from 'classnames';\nimport TreeModel, {\n  TreeNodeType,\n  TreeSelectStrategy,\n} from '@sinoui/tree-models';\nimport ExpandIconButton from './ExpandIconButton';\nimport TreeNodeLayout from './TreeNodeLayout';\n\nexport interface TreeNodeProps {\n  node: TreeNodeType;\n  treeModel: TreeModel;\n  treeSelectStrategy: TreeSelectStrategy;\n  multiple?: boolean;\n  useExpandIconToNodeIcon?: boolean;\n  hiddenNodeIcon?: boolean;\n  nodeIcon?: React.ReactChild | ((props: TreeNodeProps) => React.ReactNode);\n  dense?: boolean;\n  renderNodeTitle?: (props: TreeNodeProps) => React.ReactNode;\n  renderTreeNodeRightSection?: (props: TreeNodeProps) => React.ReactNode;\n  className?: string;\n  onClick?: (\n    event: React.MouseEvent<HTMLElement>,\n    treeNodeProps: TreeNodeProps,\n  ) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  innerRef?: (instance?: any) => void;\n  disableSelectedNodeStyle?: boolean;\n  nodeHeight?: number;\n  style?: React.CSSProperties;\n  selectedWhenNodeClick?: boolean;\n  hideSelectedButtonIcon?: boolean;\n  /**\n   * 监听树节点双击事件\n   *\n   * @memberof TreeProps\n   */\n  onDblClick?: (\n    event: React.MouseEvent<HTMLElement>,\n    treeNodeProps: TreeNodeProps,\n  ) => void;\n\n  /**\n   * 缩进\n   *\n   * @type {number}\n   * @memberof TreeNodeProps\n   */\n  indent: number;\n}\n\n/**\n * 渲染节点图标\n */\nfunction renderNodeIcon(props: TreeNodeProps) {\n  const {\n    node,\n    useExpandIconToNodeIcon,\n    hiddenNodeIcon,\n    nodeIcon: nodeIconProp,\n  } = props;\n  const showExpandIcon = !node.loading && !node.leaf;\n  const showNodeIcon = showExpandIcon\n    ? !useExpandIconToNodeIcon\n    : !hiddenNodeIcon;\n\n  if (!showNodeIcon) {\n    return null;\n  }\n\n  let nodeIcon;\n  if (node.icon) {\n    nodeIcon = <Icon color={props.node.iconColor}>{props.node.icon}</Icon>;\n  } else if (\n    typeof nodeIconProp === 'string' ||\n    typeof nodeIconProp === 'number'\n  ) {\n    nodeIcon = <SimpleIcon>{props.nodeIcon}</SimpleIcon>;\n  } else if (typeof nodeIconProp === 'function') {\n    nodeIcon = nodeIconProp(props);\n  } else {\n    nodeIcon = props.nodeIcon;\n  }\n\n  if (!nodeIcon) {\n    return null;\n  }\n\n  return (\n    <span className=\"sinoui-tree-node__icon\" key=\"nodeIcon\">\n      {nodeIcon}\n    </span>\n  );\n}\n\n/**\n * 渲染展开图标\n */\nfunction renderExpandIcon(props: TreeNodeProps) {\n  const showExpandIcon = !props.node.loading && !props.node.leaf;\n\n  return (\n    showExpandIcon && (\n      <span className=\"sinoui-tree-node__icon\" key=\"expandIcon\">\n        <ExpandIconButton\n          key=\"expandIcon\"\n          node={props.node}\n          treeModel={props.treeModel}\n        />\n      </span>\n    )\n  );\n}\n\n/**\n * 渲染进度图标\n */\nfunction renderProgress(props: TreeNodeProps) {\n  return (\n    props.node.loading && (\n      <span className=\"sinoui-tree-node__icon\" key=\"progressIcon\">\n        <Progress key=\"progress\" size={16} thickness={1} />\n      </span>\n    )\n  );\n}\n\n/**\n * 渲染节点的选择框\n */\nfunction renderCheckbox(props: TreeNodeProps) {\n  if (props.hideSelectedButtonIcon) {\n    return null;\n  }\n\n  const toggleSelect = (event: React.ChangeEvent<HTMLElement>) => {\n    event.stopPropagation();\n\n    if (props.node.selectable !== false && !props.node.disabled) {\n      props.treeSelectStrategy.toggle(props.node);\n    }\n  };\n\n  const SelectButton =\n    props.node.selectType === 'radio' ? RadioButton : CheckboxButton;\n\n  return (\n    props.multiple &&\n    props.node.selectable !== false && (\n      <span className=\"sinoui-tree-node__icon\" key=\"checkboxIcon\">\n        <SelectButton\n          dense\n          disabled={props.node.disabled}\n          checked={props.node.selected}\n          indeterminate={props.node.partialSelected}\n          onChange={toggleSelect}\n          onClick={(event) => event.stopPropagation()}\n        />\n      </span>\n    )\n  );\n}\n\n/**\n * 树节点组件\n */\nfunction TreeNode({\n  className,\n  onClick,\n  onDblClick,\n  innerRef,\n  renderNodeTitle,\n  renderTreeNodeRightSection,\n  ...props\n}: TreeNodeProps) {\n  const { node } = props;\n  return (\n    <TreeNodeLayout\n      {...props}\n      ref={innerRef}\n      className={classNames('sinoui-tree-node', className)}\n      onClick={(event) => {\n        if (\n          !(props.multiple && !props.selectedWhenNodeClick) &&\n          props.node.selectable !== false &&\n          !props.node.disabled\n        ) {\n          props.treeSelectStrategy.toggle(props.node);\n          event.stopPropagation();\n        }\n        if (onClick) {\n          onClick(event, props);\n        }\n      }}\n      onDoubleClick={(e) => (onDblClick ? onDblClick(e, props) : undefined)}\n    >\n      {renderExpandIcon(props)}\n      {renderProgress(props)}\n      {renderCheckbox(props)}\n      {renderNodeIcon(props)}\n      <P className=\"sinoui-tree-node__title\">\n        {renderNodeTitle ? renderNodeTitle(props) : node.title}\n      </P>\n      {renderTreeNodeRightSection && renderTreeNodeRightSection(props)}\n    </TreeNodeLayout>\n  );\n}\n\nexport default TreeNode;\n","import TreeNode, { TreeNodeProps } from './TreeNode';\n\nexport { TreeNodeProps };\nexport default TreeNode;\n","import TreeModel, {\n  TreeNode,\n  TreeSelectStrategy,\n  TreeModelEventType,\n} from '@sinoui/tree-models';\n\nenum COLOR {\n  /**\n   * 选中状态\n   */\n  RED = 1,\n  /**\n   * 部分选中状态\n   */\n  GREY = 2,\n  /**\n   * 未选中状态\n   */\n  WHITE = 3,\n}\n\nconst TREE_MODE_NODE_CHANGE_EVENTS = [\n  TreeModelEventType.ADD_NODE,\n  TreeModelEventType.REMOVE_NODE,\n  TreeModelEventType.MOVE_NODE,\n  TreeModelEventType.LOAD_NODE_CHILDREN_SUCCESS,\n];\n\n/**\n *\n *\n * @export\n * @class CascadeTreeSelectStrategy\n * @implements {TreeSelectStrategy}\n */\nexport default class CascadeTreeSelectStrategy implements TreeSelectStrategy {\n  /**\n   * 存储各个节点的状态颜色\n   *\n   * @private\n   * @type {{\n   *     [nodeId: string]: COLOR;\n   *   }}\n   * @memberof CascadeTreeSelectStrategy\n   */\n  private colors: {\n    [nodeId: string]: COLOR;\n  };\n\n  /**\n   * 存储节点的虚实状态\n   *\n   * @private\n   * @type {{\n   *     [nodeId: string]: boolean;\n   *   }}\n   * @memberof CascadeTreeSelectStrategy\n   */\n  private virtualNodes: {\n    [nodeId: string]: boolean;\n  };\n\n  constructor(\n    public selectedItemsfromStrategy: string[] = [],\n    private treeModel: TreeModel,\n  ) {\n    this.colors = {};\n    this.virtualNodes = {};\n\n    this.initColors();\n    this.calcVirtualNodes();\n\n    TREE_MODE_NODE_CHANGE_EVENTS.forEach((event) => {\n      this.treeModel.on(event, () => {\n        this.initColors();\n        this.calcVirtualNodes();\n      });\n    });\n  }\n\n  public get selectedItems() {\n    return this.selectedItemsfromStrategy;\n  }\n\n  public set selectedItems(selectedItems: string[]) {\n    if (selectedItems !== this.selectedItemsfromStrategy) {\n      this.selectedItemsfromStrategy = selectedItems;\n      this.initColors();\n    }\n  }\n\n  /**\n   * 将包含不可用和不可选子节点的节点重置成虚节点\n   *\n   * @private\n   * @memberof CascadeTreeSelectStrategy\n   */\n  private calcVirtualNodes() {\n    (this.treeModel.rootNodes || []).forEach((rootNode) => {\n      this.treeModel.traverseNodeChildrenByDeep(rootNode, (treeNode) => {\n        if (\n          treeNode.virtual ||\n          treeNode.id.startsWith('VIRTUAL_LEADER_NODE') ||\n          treeNode.disabled ||\n          treeNode.selectable === false\n        ) {\n          this.virtualNodes[treeNode.id] = true;\n        }\n\n        const containsParent = treeNode.level > 0;\n\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        if (!containsParent || this.virtualNodes[treeNode.parent!.id]) {\n          return;\n        }\n\n        const isParentVirtual =\n          (this.virtualNodes[treeNode.id] &&\n            !treeNode.id.startsWith('VIRTUAL_LEADER_NODE')) ||\n          ((treeNode.disabled || treeNode.selectable === false) &&\n            this.colors[treeNode.id] === COLOR.WHITE);\n\n        if (isParentVirtual) {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          this.virtualNodes[treeNode.parent!.id] = true;\n        }\n      });\n    });\n  }\n\n  /**\n   * 初始化节点颜色\n   *\n   * @memberof CascadeTreeSelectStrategy\n   */\n  private initColors() {\n    this.colors = {};\n    this.treeModel.nodes.forEach((node) => {\n      this.colors[node.id] = COLOR.WHITE;\n    });\n    const selectedItems = this.selectedItemsfromStrategy;\n    selectedItems.forEach((nodeId) => {\n      this.colorNode(nodeId, COLOR.RED, true);\n    });\n\n    if (selectedItems.length > 0) {\n      (this.treeModel.rootNodes || []).forEach((node) => {\n        this.treeModel.traverseNodeChildrenByDeep(node, (child) => {\n          if (this.colors[child.id] === COLOR.WHITE) {\n            this.colors[child.id] = this.getNodeColorWithChildren(child);\n          }\n        });\n      });\n    }\n  }\n\n  /**\n   * 将节点及其子孙节点着色\n   *\n   * @param {string} nodeId\n   *\n   * @private\n   * @param {string} nodeId\n   * @param {COLOR} color\n   * @param {boolean} [skipDisabled]\n   * @memberof CascadeTreeSelectStrategy\n   */\n  private colorNode(nodeId: string, color: COLOR, skipDisabled?: boolean) {\n    this.colors[nodeId] = color;\n\n    const node = this.treeModel.getNodeById(nodeId);\n\n    if (!node) {\n      return;\n    }\n\n    this.treeModel.traverseNodeChildrenByDeep(node, (child) => {\n      if (skipDisabled && (child.disabled || child.selectable === false)) {\n        return;\n      }\n      this.colors[child.id] = color;\n    });\n  }\n\n  /**\n   * 根据子节点情况推断出节点的颜色\n   *\n   * @param {TreeNode} node\n   * @returns\n   * @memberof CascadeTreeSelectStrategy\n   */\n  private getNodeColorWithChildren(node: TreeNode) {\n    const { children } = node;\n\n    const selectableChildren = children\n      ? children.filter(\n          (child) => !child.disabled && child.selectable !== false,\n        )\n      : [];\n\n    let color = COLOR.WHITE;\n    if (selectableChildren.length > 0) {\n      let isRed = true;\n      let isWhite = true;\n      // eslint-disable-next-line no-restricted-syntax\n      for (const child of selectableChildren) {\n        const childId = child.id;\n        if (this.colors[childId] === COLOR.GREY) {\n          isRed = false;\n          isWhite = false;\n          break;\n        } else if (this.colors[childId] === COLOR.RED) {\n          isWhite = false;\n        } else {\n          isRed = false;\n        }\n      }\n\n      if (isRed) {\n        color = COLOR.RED;\n      } else if (isWhite) {\n        color = COLOR.WHITE;\n      } else {\n        color = COLOR.GREY;\n      }\n    }\n    return color;\n  }\n\n  /**\n   * 切换节点的选中状态\n   *\n   * @param {TreeNode} treeNode\n   * @memberof CascadeTreeSelectStrategy\n   */\n  public toggle(treeNode: TreeNode) {\n    const color = this.colors[treeNode.id];\n    this.colorNode(\n      treeNode.id,\n      color === COLOR.RED ? COLOR.WHITE : COLOR.RED,\n      true,\n    );\n\n    let { parent } = treeNode;\n\n    while (parent) {\n      this.colors[parent.id] = this.getNodeColorWithChildren(parent);\n      parent = parent.parent;\n    }\n\n    this.syncSelectedItems();\n  }\n\n  /**\n   * 同步选中的节点\n   *\n   * @private\n   * @memberof CascadeTreeSelectStrategy\n   */\n  private syncSelectedItems() {\n    const selectedItems: string[] = [];\n    const callback = (node: TreeNode) => {\n      if (\n        !node.id.startsWith('VIRTUAL_LEADER_NODE') &&\n        !node.virtual &&\n        !this.virtualNodes[node.id] &&\n        this.colors[node.id] === COLOR.RED\n      ) {\n        selectedItems.push(node.id);\n      } else if (\n        node.children &&\n        (this.virtualNodes[node.id] || this.colors[node.id] !== COLOR.WHITE)\n      ) {\n        node.children.forEach(callback);\n      }\n    };\n\n    (this.treeModel.rootNodes || []).forEach(callback);\n\n    this.selectedItemsfromStrategy = [\n      ...this.selectedItemsfromStrategy.filter(\n        (id) => !this.treeModel.getNodeById(id),\n      ),\n      ...selectedItems,\n    ];\n  }\n\n  /**\n   * 节点是否选中\n   *\n   * @param {TreeNode} treeNode\n   * @returns\n   * @memberof CascadeTreeSelectStrategy\n   */\n  public isSelected(treeNode: TreeNode) {\n    const { id, parent } = treeNode;\n    const color = this.colors[id];\n    if (!color) {\n      this.colors[id] =\n        parent && this.colors[parent.id] === COLOR.RED && !this.virtualNodes[id]\n          ? COLOR.RED\n          : COLOR.WHITE;\n    }\n    return this.colors[treeNode.id] === COLOR.RED;\n  }\n\n  /**\n   * 节点的子节点是否部分选中\n   *\n   * @param {TreeNode} treeNode\n   * @returns\n   * @memberof CascadeTreeSelectStrategy\n   */\n  public isPartialSelected(treeNode: TreeNode) {\n    return this.colors[treeNode.id] === COLOR.GREY;\n  }\n}\n","import { TreeNodeType } from '@sinoui/tree-models';\n\ninterface Options {\n  useExpandIconToNodeIcon?: boolean;\n  hiddenNodeIcon?: boolean;\n  hideSelectedButtonIcon?: boolean;\n  multiple?: boolean;\n  nodeIcon?:\n    | React.ReactNode\n    | ((treeNode: TreeNodeType) => React.ReactNode | undefined);\n}\n\n/**\n * 是否需要渲染节点图标\n *\n * @param {TreeNodeType} node 节点\n * @param {Options} props 配置\n * @returns\n */\nfunction isRenderNodeIcon(node: TreeNodeType, props: Options) {\n  if (props.hiddenNodeIcon) {\n    return false;\n  }\n  if (node.leaf || !props.useExpandIconToNodeIcon) {\n    return !!(\n      node.icon ||\n      (props.nodeIcon &&\n        (typeof props.nodeIcon === 'function'\n          ? props.nodeIcon(node)\n          : props.nodeIcon))\n    );\n  }\n  return false;\n}\n\n/**\n * 是否需要渲染选择图标\n *\n * @param {TreeNodeType} node\n * @param {Options} props\n * @returns\n */\nfunction isRenderCheckboxIcon(node: TreeNodeType, props: Options) {\n  if (props.hideSelectedButtonIcon) {\n    return false;\n  }\n  return props.multiple && node.selectable !== false;\n}\n\n/**\n * 计算树节点的缩进\n *\n * @param {TreeNodeType[]} allNodes\n * @param {Options} props\n * @returns\n */\nfunction calcNodesIndent(allNodes: TreeNodeType[], props: Options) {\n  const indents: {\n    [id: string]: number;\n  } = {};\n  const relativeIndents: {\n    [id: string]: number;\n  } = {};\n\n  const getChildren = (item: TreeNodeType) => {\n    const children = !item.leaf\n      ? allNodes.filter((node) => node.parent && node.parent.id === item.id)\n      : undefined;\n\n    return children;\n  };\n\n  function inner(nodes: TreeNodeType[]) {\n    const nodeIcons: {\n      [id: string]: {\n        expanded: boolean;\n        node: boolean;\n        checkbox?: boolean;\n      };\n    } = {};\n\n    let containsExpandedIcon = false;\n    let containsNodeIcon = false;\n    let containsCheckboxIcon = false;\n\n    nodes.forEach((item) => {\n      const nodeExpanded = !item.leaf;\n      const nodeIcon = isRenderNodeIcon(item, props);\n      const nodeCheckbox = isRenderCheckboxIcon(item, props);\n      nodeIcons[item.id] = {\n        expanded: nodeExpanded,\n        node: nodeIcon,\n        checkbox: nodeCheckbox,\n      };\n      if (nodeExpanded) {\n        containsExpandedIcon = true;\n      }\n      if (nodeIcon) {\n        containsNodeIcon = true;\n      }\n      if (nodeCheckbox) {\n        containsCheckboxIcon = true;\n      }\n    });\n\n    nodes.forEach((item) => {\n      const relativeIndent =\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        (item.level === 0 ? 0 : relativeIndents[item.parent!.id]) +\n        (item.level > 0 ? 0.7 : 0);\n      relativeIndents[item.id] = relativeIndent;\n      let indent = relativeIndent;\n\n      if (containsExpandedIcon && !nodeIcons[item.id].expanded) {\n        indent += 1;\n      } else if (!containsExpandedIcon && item.leaf) {\n        indent += 0.8;\n      }\n\n      if (containsNodeIcon && !nodeIcons[item.id].node) {\n        indent += 1;\n      }\n\n      if (containsCheckboxIcon && !nodeIcons[item.id].checkbox) {\n        indent += 1;\n      }\n\n      indents[item.id] = indent;\n\n      const children = getChildren(item);\n      if (children && children.length > 0) {\n        inner(children);\n      }\n    });\n  }\n\n  inner(allNodes.filter((node) => node.level === 0));\n\n  return indents;\n}\n\nexport default calcNodesIndent;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from 'react';\nimport styled from 'styled-components';\nimport classNames from 'classnames';\nimport TreeModel, {\n  TreeNodeConfigType,\n  TreeNodeType,\n  TreeModelEventType,\n  TreeSelectStrategy,\n} from '@sinoui/tree-models';\nimport SingleTreeSelectStrategy from './SingleTreeSelectStrategy';\nimport MultipleTreeSelectStrategy from './MultipleTreeSelectStrategy';\nimport TreeNode, { TreeNodeProps } from './TreeNode';\nimport CascadeTreeSelectStrategy from './CascadeTreeSelectStrategy';\nimport calcNodesIndent from './calcNodesIndent';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  .sinoui-tree-item-moving {\n    transition: transform 195ms cubic-bezier(0, 0, 0.32, 1) !important;\n  }\n\n  .sinoui-tree__expand-icon-button__ripple-layout {\n    width: 32px;\n    height: 32px;\n    top: -6px;\n    left: -6px;\n  }\n\n  .sinoui-tree__expand-icon-button__ripple {\n    width: 32px;\n    height: 32px;\n  }\n`;\n\nexport interface TreeProps {\n  /**\n   * 树节点数据\n   */\n  nodes?: TreeNodeConfigType[];\n  /**\n   * 渲染树节点\n   */\n  renderNode?: (props: TreeNodeProps) => React.ReactNode;\n  /**\n   * 渲染树节点的标题\n   *\n   * @memberof TreeProps\n   */\n  renderNodeTitle?: (props: TreeNodeProps) => React.ReactNode;\n  /**\n   * 给树应用css类名\n   */\n  className?: string;\n  /**\n   * 给树应用css样式\n   */\n  style?: React.CSSProperties;\n  /**\n   * 树模型监听\n   */\n  treeRef?: (treeModel?: TreeModel) => void;\n  /**\n   * 是否为多选\n   */\n  multiple?: boolean;\n  /**\n   * 级联选中\n   */\n  cascade?: boolean;\n  /**\n   * 监听选中节点事件。\n   */\n  onSelect?: (nodeIds: string[], nodes: TreeNodeType[]) => void;\n  /**\n   * 选中的节点\n   */\n  selectedItems?: string[];\n  /**\n   * 节点高度\n   */\n  nodeHeight?: number;\n  /**\n   * 加载子节点\n   */\n  loadChildren?: (\n    treeNode?: TreeNodeType,\n  ) => Promise<TreeNodeConfigType[]> | TreeNodeConfigType[];\n\n  /**\n   * 紧凑型\n   */\n  dense?: boolean;\n  /**\n   * 使用展开图标作为节点图标。默认为true。\n   */\n  useExpandIconToNodeIcon?: boolean;\n  /**\n   * 节点图标。\n   */\n  nodeIcon?: React.ReactChild | ((props: TreeNodeProps) => React.ReactNode);\n  /**\n   * 渲染节点的右侧部分。\n   */\n  renderTreeNodeRightSection?: (props: TreeNodeProps) => React.ReactNode;\n  /**\n   * 选择之后不给节点加上样式\n   *\n   * @type {boolean}\n   * @memberof TreeProps\n   */\n  disableSelectedNodeStyle?: boolean;\n  nodeStyle?: React.CSSProperties;\n  /**\n   * 当节点点击时选中\n   */\n  selectedWhenNodeClick?: boolean;\n  /**\n   * 不显示选中按钮图标\n   */\n  hideSelectedButtonIcon?: boolean;\n  /**\n   * 监听树节点点击事件\n   */\n  onNodeClick?: (\n    event: React.MouseEvent<HTMLElement>,\n    treeNodeProps: TreeNodeProps,\n  ) => void;\n  /**\n   * 监听树节点双击事件\n   *\n   * @memberof TreeProps\n   */\n  onNodeDblClick?: (\n    event: React.MouseEvent<HTMLElement>,\n    treeNodeProps: TreeNodeProps,\n  ) => void;\n  /**\n   * 展开根节点\n   *\n   * @type {boolean}\n   * @memberof TreeProps\n   */\n  expandRootNodes?: boolean;\n\n  /**\n   * 当属性发生变化时更新树\n   *\n   * @type {boolean}\n   * @memberof TreeProps\n   */\n  updateAfterPropsChange?: boolean;\n\n  /**\n   * 是否允许选择的节点为空\n   *\n   * @type {boolean}\n   * @memberof TreeProps\n   */\n  isAllowEmpty?: boolean;\n}\n\nexport interface TreeState {\n  nodes: TreeNodeType[];\n  selectedItems: string[] | undefined;\n  treeSelectStrategy: TreeSelectStrategy;\n  prevProps: TreeProps;\n}\n\nfunction monitorFnCall<\n  T extends {\n    [x: string]: Function;\n  }\n>(obj: T, fns: string[], callback: (obj: T) => void) {\n  const proxyFn = (fnName: string) => {\n    const fn = obj[fnName];\n    // eslint-disable-next-line no-param-reassign\n    (obj as any)[fnName] = (...args: any[]) => {\n      fn.apply(obj, args);\n      callback(obj);\n    };\n  };\n  fns.forEach(proxyFn);\n\n  return obj;\n}\n\nconst TREE_MODE_CHANGE_EVENTS = [\n  TreeModelEventType.ADD_NODE,\n  TreeModelEventType.REMOVE_NODE,\n  TreeModelEventType.MOVE_NODE,\n  TreeModelEventType.EXPAND_NODE,\n  TreeModelEventType.COLLAPSE_NODE,\n  TreeModelEventType.UPDATE_NODE,\n  TreeModelEventType.BEGIN_LOAD_NODE_CHILDREN,\n  TreeModelEventType.LOAD_NODE_CHILDREN_SUCCESS,\n];\n\n/**\n * 树组件\n */\nexport default class Tree extends React.Component<TreeProps, TreeState> {\n  /**\n   * 树模型\n   */\n  private treeModel: TreeModel = {} as TreeModel;\n\n  /**\n   * 树组件是否处于受控状态\n   */\n  private isControlled: boolean;\n\n  // eslint-disable-next-line react/static-property-placement\n  public static defaultProps = {\n    renderNode: TreeNode,\n    dense: true,\n    useExpandIconToNodeIcon: true,\n    expandRootNodes: true,\n  };\n\n  constructor(props: TreeProps) {\n    super(props);\n    const { selectedItems } = props;\n\n    this.onTreeModelUpate = this.onTreeModelUpate.bind(this);\n    this.createTreeModel();\n    this.isControlled =\n      typeof props.selectedItems !== 'undefined' &&\n      typeof props.onSelect === 'function';\n\n    this.state = {\n      nodes: this.treeModel.getVisibleNodes(),\n      selectedItems,\n      prevProps: props,\n      treeSelectStrategy: this.createTreeSelectStrategy(),\n    };\n  }\n\n  public componentDidMount() {\n    const { treeRef } = this.props;\n    if (treeRef) {\n      treeRef(this.treeModel);\n    }\n  }\n\n  public static getDerivedStateFromProps(\n    nextProps: TreeProps,\n    prevState: TreeState,\n  ) {\n    if (nextProps.selectedItems !== prevState.prevProps.selectedItems) {\n      const { treeSelectStrategy } = prevState;\n      treeSelectStrategy.selectedItems = nextProps.selectedItems;\n      return {\n        selectItems: nextProps.selectedItems,\n      };\n    }\n\n    return null;\n  }\n\n  public componentDidUpdate(prevProps: TreeProps) {\n    const { updateAfterPropsChange, nodes } = this.props;\n    if (updateAfterPropsChange && prevProps.nodes !== nodes) {\n      this.treeModel.updateRootNodes(nodes || []);\n    }\n  }\n\n  public componentWillUnmount() {\n    TREE_MODE_CHANGE_EVENTS.forEach((event) =>\n      this.treeModel.removeListener(event, this.onTreeModelUpate),\n    );\n  }\n\n  private onTreeModelUpate() {\n    this.setState({\n      nodes: this.treeModel.getVisibleNodes(),\n    });\n  }\n\n  public updateNode = (\n    nodeId: string,\n    extraNodeInfo: {\n      [x: string]: any;\n    },\n  ) => {\n    this.treeModel.updateNode(nodeId, extraNodeInfo);\n  };\n\n  private isVisible = (node: { isVisible: string }) => {\n    return node.isVisible === '1';\n  };\n\n  /**\n   * 更新选中的节点\n   *\n   * @private\n   * @param {string[]} selectedItems\n   * @memberof Tree\n   */\n  private updateSelectedItems(selectedItems: string[]) {\n    const { selectedItems: selectedItemsProps, onSelect } = this.props;\n    const { selectedItems: selectedItemsState } = this.state;\n    const changed = this.isControlled\n      ? selectedItemsProps !== selectedItems\n      : selectedItemsState !== selectedItems;\n    if (!this.isControlled && changed) {\n      this.setState({\n        selectedItems,\n      });\n    }\n    if (changed && onSelect) {\n      onSelect(selectedItems, selectedItems\n        .map((id) => this.treeModel.nodes.find((node) => node.id === id))\n        .filter(Boolean) as TreeNodeType[]);\n    }\n  }\n\n  /**\n   * 节点是否选中\n   *\n   * @private\n   * @param {TreeNode} node 树节点\n   * @returns\n   */\n  private isSelected(node: TreeNodeType) {\n    const { treeSelectStrategy } = this.state;\n    return treeSelectStrategy.isSelected(node);\n  }\n\n  private isPartialSelected(node: TreeNodeType) {\n    const { treeSelectStrategy } = this.state;\n    return treeSelectStrategy.isPartialSelected(node);\n  }\n\n  /**\n   * 创建树模型\n   */\n  private createTreeModel() {\n    const { nodes, loadChildren, expandRootNodes } = this.props;\n    this.treeModel = new TreeModel(nodes, loadChildren);\n    TREE_MODE_CHANGE_EVENTS.forEach((event) =>\n      this.treeModel.on(event, this.onTreeModelUpate),\n    );\n\n    if (nodes && expandRootNodes) {\n      nodes.forEach((node) => this.treeModel.expandNode(node.id));\n    }\n  }\n\n  /**\n   * 创建树节点选择策略\n   */\n  private createTreeSelectStrategy() {\n    const { multiple, cascade, selectedItems, isAllowEmpty } = this.props;\n    let strategy;\n    if (multiple && cascade) {\n      strategy = new CascadeTreeSelectStrategy(selectedItems, this.treeModel);\n    } else if (multiple) {\n      strategy = new MultipleTreeSelectStrategy(selectedItems, this.treeModel);\n    } else {\n      strategy = new SingleTreeSelectStrategy(selectedItems, isAllowEmpty);\n    }\n\n    return monitorFnCall(strategy as any, ['toggle'], () => {\n      const { treeSelectStrategy } = this.state;\n      this.updateSelectedItems(treeSelectStrategy.selectedItems || []);\n    });\n  }\n\n  /**\n   * 渲染树节点\n   *\n   * @param node 节点\n   * @param index 顺序号\n   */\n  private renderTreeNode(\n    node: TreeNodeType,\n    indents: {\n      [id: string]: number;\n    },\n  ) {\n    const selected = this.isSelected(node);\n    const partialSelected = !selected && this.isPartialSelected(node);\n    const isVisible = this.isVisible(node as any);\n    const style = isVisible ? { textDecoration: 'line-through' } : {};\n    const {\n      nodeHeight,\n      nodeIcon,\n      useExpandIconToNodeIcon,\n      dense,\n      multiple,\n      renderTreeNodeRightSection,\n      disableSelectedNodeStyle,\n      nodeStyle,\n      selectedWhenNodeClick,\n      hideSelectedButtonIcon,\n      onNodeClick,\n      onNodeDblClick,\n      renderNodeTitle,\n      renderNode,\n    } = this.props;\n\n    const { treeSelectStrategy } = this.state;\n\n    const treeNodeProps = {\n      key: node.id,\n      nodeHeight,\n      node: { ...node, selected, partialSelected },\n      nodeIcon,\n      treeModel: this.treeModel,\n      treeSelectStrategy,\n      useExpandIconToNodeIcon,\n      dense,\n      multiple,\n      renderTreeNodeRightSection,\n      disableSelectedNodeStyle,\n      style: { ...nodeStyle, ...style },\n      selectedWhenNodeClick,\n      hideSelectedButtonIcon,\n      onClick: onNodeClick,\n      onDblClick: onNodeDblClick,\n      renderNodeTitle,\n      indent: indents[node.id],\n    };\n\n    if (renderNode) {\n      return renderNode(treeNodeProps);\n    }\n    return null;\n  }\n\n  public render() {\n    const { nodes } = this.state;\n    const { style, className } = this.props;\n    const indents = calcNodesIndent(nodes, this.props);\n    return (\n      <Wrapper style={style} className={classNames('sinoui-tree', className)}>\n        {nodes.map((node) => this.renderTreeNode(node, indents))}\n      </Wrapper>\n    );\n  }\n}\n","import TreeModel, {\n  TreeNodeType,\n  TreeNodeConfigType,\n  TreeSelectStrategy,\n} from '@sinoui/tree-models';\nimport Tree, { TreeProps } from './Tree';\nimport TreeNode, { TreeNodeProps } from './TreeNode';\n\nexport {\n  TreeProps,\n  TreeNodeProps,\n  TreeNode,\n  TreeNodeType,\n  TreeNodeConfigType,\n  TreeModel,\n  TreeSelectStrategy,\n};\nexport default Tree;\n","/* eslint-disable import/no-extraneous-dependencies */\nimport React from 'react';\nimport {\n  DragSource,\n  DropTarget,\n  DragSourceConnector,\n  DragSourceMonitor,\n  DropTargetConnector,\n  DropTargetMonitor,\n} from 'react-dnd';\nimport { findDOMNode } from 'react-dom';\nimport { TreeNodeProps, TreeNode } from '@sinoui/tree';\n\n/**\n * Implements the drag source contract.\n */\nconst treeNodeDrag = {\n  beginDrag(props: TreeNodeProps) {\n    return {\n      nodeId: props.node.id,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      parentId: props.node.parent!.id,\n    };\n  },\n};\n\nconst treeNodeDrop = {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  drop() {},\n  hover(props: TreeNodeProps, monitor: DropTargetMonitor, component: any) {\n    const dragNodeId = monitor.getItem().nodeId;\n    const dragIndex = props.treeModel.nodes.findIndex(\n      (node) => node.id === dragNodeId,\n    );\n    const hoverNodeId = props.node.id;\n    const hoverIndex = props.treeModel.nodes.findIndex(\n      (node) => node.id === hoverNodeId,\n    );\n    if (hoverIndex === dragIndex) {\n      return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const hoverParentNodeId = props.node.parent!.id;\n\n    // eslint-disable-next-line react/no-find-dom-node\n    const hoverBoundingRect = (findDOMNode(\n      component,\n    ) as HTMLElement).getBoundingClientRect();\n    const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n    const clientOffset = monitor.getClientOffset();\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const hoverClientY = clientOffset!.y - hoverBoundingRect.top;\n\n    // Dragging downwards\n    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n      return;\n    }\n\n    // Dragging upwards\n    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n      return;\n    }\n\n    if (dragIndex !== -1) {\n      const idx = props.treeModel.getNodeIdxOfParent(hoverNodeId);\n      props.treeModel.moveNode(dragNodeId, hoverParentNodeId, idx);\n    } else {\n      props.treeModel.addNode(hoverParentNodeId, {\n        id: dragNodeId,\n        title: '新增节点',\n        leaf: true,\n      });\n    }\n  },\n\n  canDrop(props: TreeNodeProps, monitor: DropTargetMonitor) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return monitor.getItem().parentId === props.node.parent!.id;\n  },\n};\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass TreeNodeComponent extends React.Component<\n  TreeNodeProps & {\n    connectDragSource: any;\n    isDragging: boolean;\n    connectDropTarget: any;\n    isOvering: boolean;\n  }\n> {\n  public render() {\n    const { connectDropTarget, connectDragSource } = this.props;\n    return (\n      <TreeNode\n        {...this.props}\n        innerRef={(instance) => {\n          // eslint-disable-next-line react/no-find-dom-node\n          const domNode = findDOMNode(instance);\n          if (domNode) {\n            connectDropTarget(domNode);\n            connectDragSource(domNode);\n          }\n        }}\n      />\n    );\n  }\n}\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n  };\n}\n\nfunction dropCollect(connect: DropTargetConnector, monitor: DropTargetMonitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n  };\n}\n\nexport default DropTarget('sinoui-tree-node', treeNodeDrop, dropCollect)(\n  DragSource('sinoui-tree-node', treeNodeDrag, collect)(\n    TreeNodeComponent as any,\n  ),\n);\n","/* eslint-disable import/no-extraneous-dependencies */\nimport React from 'react';\nimport { DragSource, DragSourceConnector, DragSourceMonitor } from 'react-dnd';\nimport { findDOMNode } from 'react-dom';\nimport { TreeNodeProps } from '@sinoui/tree';\n\n/**\n * Implements the drag source contract.\n */\nconst treeNodeDrag = {\n  beginDrag() {\n    return {\n      nodeId: '001',\n    };\n  },\n};\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass DraggableTreeNode extends React.Component<\n  TreeNodeProps & {\n    connectDragSource: any;\n    isDragging: boolean;\n    connectDropTarget: any;\n    isOvering: boolean;\n  }\n> {\n  public render() {\n    const { connectDragSource } = this.props;\n    return (\n      <div\n        style={{ height: 36 }}\n        ref={(instance) => {\n          // eslint-disable-next-line react/no-find-dom-node\n          const domNode = findDOMNode(instance);\n          if (domNode) {\n            connectDragSource(domNode);\n          }\n        }}\n      >\n        新增节点\n      </div>\n    );\n  }\n}\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n  };\n}\n\nexport default DragSource('sinoui-tree-node', treeNodeDrag, collect)(\n  DraggableTreeNode as any,\n);\n","/* eslint-disable import/no-extraneous-dependencies */\nimport React from 'react';\nimport Tree, { TreeNodeConfigType, TreeNodeType } from '@sinoui/tree';\nimport styled from 'styled-components';\nimport { getTreeNodes } from '../treeData';\nimport TreeNodeComponent from './TreeNode';\nimport DraggableTreeNode from './DraggableTreeNode';\n\nfunction loadChildren(\n  treeNode?: TreeNodeType,\n): Promise<TreeNodeConfigType[]> | TreeNodeConfigType[] {\n  if (!treeNode) {\n    return getTreeNodes(0, 0, 'node', false);\n  }\n  const promise: Promise<TreeNodeConfigType[]> = new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(getTreeNodes(treeNode.level + 1, 0, treeNode.id, false));\n    }, 1500);\n  });\n\n  return promise;\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-around;\n`;\n\nfunction DraggableTreeDemo() {\n  return (\n    <Wrapper>\n      <Tree\n        loadChildren={loadChildren}\n        renderNode={(props) => <TreeNodeComponent {...props} />}\n      />\n      <DraggableTreeNode />\n    </Wrapper>\n  );\n}\n\nexport default DraggableTreeDemo;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground } from 'docz';\nimport treeData, { getTreeNodes } from './treeData';\nimport Tree from '@sinoui/tree';\nimport DraggableTreeDemo from './components/DraggableTreeDemo';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"sinouitree\"\n    }}>{`@sinoui/tree`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\">{`树组件旨在展现完整的层级关系，并具有展开、收起、选择等交互功能。`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"依赖安装\"\n    }}>{`依赖安装`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`yarn add @sinoui/tree\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"入门示例\"\n    }}>{`入门示例`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport Tree from '@sinoui/tree';\nimport treeData from './treeData';\nfunction Demo() {\n  return <Tree nodes={treeData} />;\n}\n`}</code></pre>\n    <Playground __position={0} __code={'<Tree nodes={treeData} />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      treeData,\n      getTreeNodes,\n      Tree,\n      DraggableTreeDemo\n    }} mdxType=\"Playground\">\n  <Tree nodes={treeData} mdxType=\"Tree\" />\n    </Playground>\n    <p>{`其中`}<inlineCode parentName=\"p\">{`Tree`}</inlineCode>{`组件在渲染树组件时，需要的`}<inlineCode parentName=\"p\">{`nodes`}</inlineCode>{`数据结构为：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`[\n  {\n    id: 'node1', // 节点id\n    title: '节点一', // 节点名称\n    selected: true, //\n    leaf: false, // 是否为叶子结点\n    level: 1, // 层级关系\n    selectType: 'checkbox', // 选择类型\n    children: [\n      // 子节点\n      {\n        id: 'node2',\n        title: '节点二',\n      },\n    ],\n    parent:{  //父节点\n      ...\n    }\n  },\n];\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"一次性加载所有数据\"\n    }}>{`一次性加载所有数据`}</h2>\n    <p>{`所谓一次性加载所有数据，即调用一次后端接口获取所有节点数据，然后通过`}<inlineCode parentName=\"p\">{`nodes`}</inlineCode>{`属性传给`}<inlineCode parentName=\"p\">{`Tree`}</inlineCode>{`组件。`}</p>\n    <Playground __position={1} __code={'<Tree nodes={treeData} />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      treeData,\n      getTreeNodes,\n      Tree,\n      DraggableTreeDemo\n    }} mdxType=\"Playground\">\n  <Tree nodes={treeData} mdxType=\"Tree\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"逐级加载数据\"\n    }}>{`逐级加载数据`}</h2>\n    <p>{`首先获取第一层级树节点，在点击节点时，逐个加载数据。这里需要给`}<inlineCode parentName=\"p\">{`Tree`}</inlineCode>{`组件一个`}<inlineCode parentName=\"p\">{`loadChildren`}</inlineCode>{`方法属性，通过此方法加载数据。`}</p>\n    <Playground __position={2} __code={'() => {\\n  const loadChildren = treeNode => {\\n    if (!treeNode) {\\n      return getTreeNodes(0, 0, \\'node\\', false)\\n    } else {\\n      const promise = new Promise((resolve, reject) => {\\n        setTimeout(() => {\\n          resolve(getTreeNodes(treeNode.level + 1, 0, treeNode.id, false))\\n        }, 1500)\\n      })\\n      return promise\\n    }\\n  }\\n\\n  return <Tree loadChildren={loadChildren} dense={false} />\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      treeData,\n      getTreeNodes,\n      Tree,\n      DraggableTreeDemo\n    }} mdxType=\"Playground\">\n  {() => {\n        const loadChildren = treeNode => {\n          if (!treeNode) {\n            return getTreeNodes(0, 0, 'node', false);\n          } else {\n            const promise = new Promise((resolve, reject) => {\n              setTimeout(() => {\n                resolve(getTreeNodes(treeNode.level + 1, 0, treeNode.id, false));\n              }, 1500);\n            });\n            return promise;\n          }\n        };\n\n        return <Tree loadChildren={loadChildren} dense={false} mdxType=\"Tree\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"多选\"\n    }}>{`多选`}</h2>\n    <p>{`给`}<inlineCode parentName=\"p\">{`Tree`}</inlineCode>{`组件指定`}<inlineCode parentName=\"p\">{`multiple`}</inlineCode>{`属性即可达到多选效果。`}</p>\n    <Playground __position={3} __code={'() => {\\n  const loadChildren = treeNode => {\\n    if (!treeNode) {\\n      return getTreeNodes(0, 0, \\'node\\', false)\\n    } else {\\n      const promise = new Promise((resolve, reject) => {\\n        setTimeout(() => {\\n          resolve(getTreeNodes(treeNode.level + 1, 0, treeNode.id, false))\\n        }, 1500)\\n      })\\n      return promise\\n    }\\n  }\\n  return (\\n    <Tree\\n      loadChildren={loadChildren}\\n      multiple\\n      selectedItems={[\\'node_1\\', \\'node_2\\']}\\n    />\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      treeData,\n      getTreeNodes,\n      Tree,\n      DraggableTreeDemo\n    }} mdxType=\"Playground\">\n  {() => {\n        const loadChildren = treeNode => {\n          if (!treeNode) {\n            return getTreeNodes(0, 0, 'node', false);\n          } else {\n            const promise = new Promise((resolve, reject) => {\n              setTimeout(() => {\n                resolve(getTreeNodes(treeNode.level + 1, 0, treeNode.id, false));\n              }, 1500);\n            });\n            return promise;\n          }\n        };\n\n        return <Tree loadChildren={loadChildren} multiple selectedItems={['node_1', 'node_2']} mdxType=\"Tree\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"级联选择\"\n    }}>{`级联选择`}</h2>\n    <p>{`通过给`}<inlineCode parentName=\"p\">{`Tree`}</inlineCode>{`组件一个`}<inlineCode parentName=\"p\">{`cascade`}</inlineCode>{`属性实现级联选择。`}</p>\n    <Playground __position={4} __code={'() => {\\n  const loadChildren = treeNode => {\\n    if (!treeNode) {\\n      return getTreeNodes(0, 0, \\'node\\', false).map(node => ({\\n        ...node,\\n        selectType: \\'checkbox\\',\\n        selectable: node.id !== \\'node_9\\',\\n      }))\\n    } else {\\n      const promise = new Promise(resolve => {\\n        setTimeout(() => {\\n          resolve(\\n            getTreeNodes(treeNode.level + 1, 0, treeNode.id, false).map(\\n              node => ({ ...node, selectType: \\'checkbox\\' }),\\n            ),\\n          )\\n        }, 1500)\\n      })\\n      return promise\\n    }\\n  }\\n\\n  return <Tree loadChildren={loadChildren} multiple cascade />\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      treeData,\n      getTreeNodes,\n      Tree,\n      DraggableTreeDemo\n    }} mdxType=\"Playground\">\n  {() => {\n        const loadChildren = treeNode => {\n          if (!treeNode) {\n            return getTreeNodes(0, 0, 'node', false).map(node => ({ ...node,\n              selectType: 'checkbox',\n              selectable: node.id !== 'node_9'\n            }));\n          } else {\n            const promise = new Promise(resolve => {\n              setTimeout(() => {\n                resolve(getTreeNodes(treeNode.level + 1, 0, treeNode.id, false).map(node => ({ ...node,\n                  selectType: 'checkbox'\n                })));\n              }, 1500);\n            });\n            return promise;\n          }\n        };\n\n        return <Tree loadChildren={loadChildren} multiple cascade mdxType=\"Tree\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"拖拽新增和排序\"\n    }}>{`拖拽新增和排序`}</h2>\n    <p>{`这里我们使用`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/react-dnd\"\n      }}>{`react-dnd`}</a>{`来实现拖拽新增和排序。`}</p>\n    <p>{`首先需要自定义树节点的渲染组件`}<inlineCode parentName=\"p\">{`TreeNodeComponent.tsx`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport {\n  DragSource,\n  DropTarget,\n  DragSourceConnector,\n  DragSourceMonitor,\n  DropTargetConnector,\n  DropTargetMonitor,\n} from 'react-dnd';\nimport { findDOMNode } from 'react-dom';\nimport { TreeNodeProps, TreeNode } from '@sinoui/tree';\n\n/**\n * Implements the drag source contract.\n */\nconst treeNodeDrag = {\n  beginDrag(props: TreeNodeProps) {\n    return {\n      nodeId: props.node.id,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      parentId: props.node.parent!.id,\n    };\n  },\n};\n\nconst treeNodeDrop = {\n  drop() {},\n  hover(props: TreeNodeProps, monitor: DropTargetMonitor, component: any) {\n    const dragNodeId = monitor.getItem().nodeId;\n    const dragIndex = props.treeModel.nodes.findIndex(\n      (node) => node.id === dragNodeId,\n    );\n    const hoverNodeId = props.node.id;\n    const hoverIndex = props.treeModel.nodes.findIndex(\n      (node) => node.id === hoverNodeId,\n    );\n    if (hoverIndex === dragIndex) {\n      return;\n    }\n\n    const hoverParentNodeId = props.node.parent!.id;\n\n    // eslint-disable-next-line react/no-find-dom-node\n    const hoverBoundingRect = (findDOMNode(\n      component,\n    ) as HTMLElement).getBoundingClientRect();\n    const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n    const clientOffset = monitor.getClientOffset();\n    const hoverClientY = clientOffset!.y - hoverBoundingRect.top;\n\n    // Dragging downwards\n    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n      return;\n    }\n\n    // Dragging upwards\n    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n      return;\n    }\n\n    if (dragIndex !== -1) {\n      const idx = props.treeModel.getNodeIdxOfParent(hoverNodeId);\n      props.treeModel.moveNode(dragNodeId, hoverParentNodeId, idx);\n    } else {\n      props.treeModel.addNode(hoverParentNodeId, {\n        id: dragNodeId,\n        title: '新增节点',\n        leaf: true,\n      });\n    }\n  },\n\n  canDrop(props: TreeNodeProps, monitor: DropTargetMonitor) {\n    return monitor.getItem().parentId === props.node.parent!.id;\n  },\n};\n\nclass TreeNodeComponent extends React.Component<\n  TreeNodeProps & {\n    connectDragSource: any;\n    isDragging: boolean;\n    connectDropTarget: any;\n    isOvering: boolean;\n  }\n> {\n  public render() {\n    const { connectDropTarget, connectDragSource } = this.props;\n    return (\n      <TreeNode\n        {...this.props}\n        innerRef={(instance) => {\n          // eslint-disable-next-line react/no-find-dom-node\n          const domNode = findDOMNode(instance);\n          if (domNode) {\n            connectDropTarget(domNode);\n            connectDragSource(domNode);\n          }\n        }}\n      />\n    );\n  }\n}\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n  };\n}\n\nfunction dropCollect(connect: DropTargetConnector, monitor: DropTargetMonitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n  };\n}\n\nexport default DropTarget('sinoui-tree-node', treeNodeDrop, dropCollect)(\n  DragSource('sinoui-tree-node', treeNodeDrag, collect)(\n    TreeNodeComponent as any,\n  ),\n);\n`}</code></pre>\n    <p>{`然后还需要定义一个可拖拽的新增节点组件`}<inlineCode parentName=\"p\">{`DraggableTreeNode.tsx`}</inlineCode>{`：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport { DragSource, DragSourceConnector, DragSourceMonitor } from 'react-dnd';\nimport { findDOMNode } from 'react-dom';\nimport { TreeNodeProps } from '@sinoui/tree';\n\n/**\n * Implements the drag source contract.\n */\nconst treeNodeDrag = {\n  beginDrag() {\n    return {\n      nodeId: '001',\n    };\n  },\n};\n\nclass DraggableTreeNode extends React.Component<\n  TreeNodeProps & {\n    connectDragSource: any;\n    isDragging: boolean;\n    connectDropTarget: any;\n    isOvering: boolean;\n  }\n> {\n  public render() {\n    const { connectDragSource } = this.props;\n    return (\n      <div\n        style={{ height: 36 }}\n        ref={(instance) => {\n          // eslint-disable-next-line react/no-find-dom-node\n          const domNode = findDOMNode(instance);\n          if (domNode) {\n            connectDragSource(domNode);\n          }\n        }}\n      >\n        新增节点\n      </div>\n    );\n  }\n}\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n  };\n}\n\nexport default DragSource('sinoui-tree-node', treeNodeDrag, collect)(\n  DraggableTreeNode as any,\n);\n`}</code></pre>\n    <p>{`最后使用`}<inlineCode parentName=\"p\">{`TreeNodeComponent`}</inlineCode>{`和 `}<inlineCode parentName=\"p\">{`DraggableTreeNode`}</inlineCode>{`组件实现拖拽新增和排序：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport Tree, { TreeNodeConfigType, TreeNodeType } from '@sinoui/tree';\nimport styled from 'styled-components';\nimport { getTreeNodes } from '../treeData';\nimport TreeNodeComponent from './TreeNode';\nimport DraggableTreeNode from './DraggableTreeNode';\n\nfunction loadChildren(\n  treeNode?: TreeNodeType,\n): Promise<TreeNodeConfigType[]> | TreeNodeConfigType[] {\n  if (!treeNode) {\n    return getTreeNodes(0, 0, 'node', false);\n  }\n  const promise: Promise<TreeNodeConfigType[]> = new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(getTreeNodes(treeNode.level + 1, 0, treeNode.id, false));\n    }, 1500);\n  });\n\n  return promise;\n}\n\nconst Wrapper = styled.div\\`\n  display: flex;\n  justify-content: space-around;\n\\`;\n\nfunction DraggableTreeDemo() {\n  return (\n    <Wrapper>\n      <Tree\n        loadChildren={loadChildren}\n        renderNode={(props) => <TreeNodeComponent {...props} />}\n      />\n      <DraggableTreeNode />\n    </Wrapper>\n  );\n}\n\nexport default DragDropContext(HTML5Backend)(DraggableTreeDemo as any);\n`}</code></pre>\n    <Playground __position={5} __code={'<DraggableTreeDemo />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      treeData,\n      getTreeNodes,\n      Tree,\n      DraggableTreeDemo\n    }} mdxType=\"Playground\">\n  <DraggableTreeDemo mdxType=\"DraggableTreeDemo\" />\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}